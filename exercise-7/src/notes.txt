Alright, here: 

Guidelines: 
- Server should accept multiple connections at the same time. Use epoll for that.
- Commands for client: List channels, goto channel, create channel.
- Everyone receives the message for current channel.
- Keep a current_channel variable for every client.
- Add that in client class.
- On the server side, server has a database sortof where it maintains
- who all sent 
- Exactly what database should server be using to keep track?
- Try to avoid regular changes to files, i want to avoid changing makefile again and again for now.

- Deciding the data structure: 
  - Need to send the incoming message to all the people in current channel.
  - A map from channels to clients.
  - A map from client to channel.
  - A history database, which tracks the exact history of every channel (yes, on a channel basis)
  - Each client has a username? probably a field in client object only?

Current Assumptions: 
  - Every user can join/create any channel.

API Specification: (user side)
  - msg/channel-id/message: sends a message to channel-id channel
  - register/channel-id: user is now a part of channel-id channel
  - goto/channel-id: user is now at channel-id if user is already 
    registered and will receive all the corresponding messages to this 
    channel
  - create/ : creates a new channel, user gets the channel-id in return
    user is by default a part of this channel
  - list/ : lists all the channels that are present on the server along 
    with their channel ids. User may register to any
  - 

- Progression: 
  - We will run a server
  - Some arbitrary person will run a client
    - Static client file: The client already has some predefined set of commands that it runs
      and communicates.
    - Dynamic client file: The client takes input form command line and sends it's commands accordingly.
    - The client then interacts with server and does things accordingly.
    - For messages, planning to follow this format: "Command/Message".
    - Implement an escape character as well.

Make a shell script which can launch multiple clients at the same time.
All the clients will connect to server at the same time.


client-main.cc: contains running code of client. Has the main function.
chat-client.cc and .h: contain the client class where all the functions have been defined.
chat-server.cc and .h: contain the server class where all the functions have been defined.
chat-sockets.cc and .h: contain basic functions that have been used in client and server classes.

server-main.cc: contains running code of server. Has the main function too.